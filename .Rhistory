library(tidyverse)
library(purrr)
library(sf)
ozbig <- read_sf("./data/gadm36_AUS_shp/gadm36_AUS_1.shp")
oz_st <- maptools::thinnedSpatialPoly(as(ozbig, "Spatial"), tolerance = 0.1, minarea = 0.001, topologyPreserve = TRUE)
oz <- st_as_sf(oz_st)
df.oz.purr <- oz$geometry %>%
map_depth(3, data.frame) %>%
purrr::flatten() %>%
purrr::flatten() %>%
bind_rows(.id = "group") %>%
rename("lat" = y, "long" = x)
?usethis::use_data
file.choose()
getwd()
ozbig <- read_sf("../Lab2/Data/gadm36_AUS_shp/gadm36_AUS_1.shp")
usethis::use_data(ozbig)
oz_st <- maptools::thinnedSpatialPoly(as(ozbig, "Spatial"), tolerance = 0.1, minarea = 0.001, topologyPreserve = TRUE)
oz <- st_as_sf(oz_st)
oz
Mat2Df <- function(Mat){
long <- Mat[,1]
lat <- Mat[,2]
order <- 1:nrow(Mat)
group <- rep(rnorm(1),nrow(Mat))
df <- data.frame(long=long,lat=lat,group=group,order=order)
df
}
oz$geometry[[1]]
oz$geometry[[1]][[1]]
oz$geometry[[1]][[1]][[1]]
str(oz$geometry[[1]][[1]][[1]])
oz_flatten <- flatten(flatten(oz$geometry))
str(oz_flatten)
ozplus <- purrr::map_df(.x=oz_flatten,.f=Mat2Df)
ozplus %>% ggplot(aes(x = long, y = lat, group = group)) + geom_polygon()
head(ozplus)
as.matrix <- oz$geometry[[1]][[1]][[1]]
test <- as.matrix(oz$geometry[[1]][[1]][[1]])
test
str(test)
is.matrix(test)
is.list(test)
Mat2Df(test)
str(Mat2Df(oz$geometry[[1]][[1]]))
str(oz$geometry[[1]][[1]])
is.matrix(oz$geometry[[1]][[1]])
is.matrix(oz$geometry[[1]][[1]][[1]])
Mat2Df(oz$geometry[[1]][[1]][[1]])
Mat2Df <- function(Mat){
long <- Mat[,1]
lat <- Mat[,2]
order <- 1:nrow(Mat)
# group <- rep(rnorm(1),nrow(Mat))
df <- data.frame(long=long,lat=lat,order=order)
df
}
Mat2Df <- function(Mat){
long <- Mat[,1]
lat <- Mat[,2]
order <- 1:nrow(Mat)
# group <- rep(rnorm(1),nrow(Mat))
df <- data.frame(long=long,lat=lat,order=order)
df
}
Mat2Df(oz$geometry[[1]][[1]][[1]])
head(oz_flatten)
I()
?I()
head(oz)
oz$geometry[[1]]
oz$geometry[[1]][[1]]
test
test <- oz$geometry[[1]][[1]][[1]]
is.matrix(test)
Mat2Df(test)
test2 <- oz$geometry[[1]][[1]]
is.list(test2)
head(test2)
test2 <- oz$geometry[[1]]
head(test2)
Mat2Df(test2)
flatten(test2)
ck <- flatten(test2) %>% mutate(geo = purrr::map(Mat2Df))
?map_df
map(flatten(test2),Mat2Df) -> ck
ck
flatten(ck)
unnest(ck)
str(ck)
detect_index(ck)
modify(test2, Mat2Df)
modify_depth(test2, 2, Mat2Df)
modify_depth(test2, 3, Mat2Df)
modify(ck, flatten)
mylist <- list()
mylist_ <- list()
for(i in 1:5) {
for(j in 1:5) {
mylist[[j]] <- i*j
}
mylist_[[i]] <- mylist
}
mylist_
ozplus <- oz %>% mutate(
data = geometry %>% purrr::map(.f = function(list) {
inner = list %>% purrr::map(.f = Mat2Df)
data.frame(subgroup = 1:length(inner), inner = I(inner))
})
)
ck
length(cl)
length(ck)
map_df(ck, flatten)
map(ck, flatten)
unnest(cl)
unnest(ck)
?unnest
df <- tibble(
x = 1:3,
y = c("a", "d,e,f", "g,h")
)
df %>%
transform(y = strsplit(y, ",")) %>%
unnest(y)
y
df$y
is.list(df$y)
unnest(ck, 1)
is.data.frame(df$t)
is.data.frame(df$y)
str(df$y)
df <- tibble(
a = list(c("a", "b"), "c"),
b = list(1:2, 3),
c = c(11, 22)
)
df %>% unnest(a, b)
# If you omit the column names, it'll unnest all list-cols
df %>% unnest()
df
data.frame(tib = ck)
data.frame(tib = list(ck))
df %>% unnest(a, .preserve = b)
?pull
pull(1)
map(test2, pull)
ck
?lapply
?do
unlist(ck, recursive = FALSE)
unlist(ck)
unlist(ck, recursive = FALSE)
oz$geometry[[1]]
library(tidyverse)
library(purrr)
library(sf)
ozbig <- read_sf("../Lab2/Data/gadm36_AUS_shp/gadm36_AUS_1.shp")
oz_st <- maptools::thinnedSpatialPoly(as(ozbig, "Spatial"), tolerance = 0.1, minarea = 0.001, topologyPreserve = TRUE)
oz <- st_as_sf(oz_st)
Mat2Df <- function(Mat){
long <- Mat[,1]
lat <- Mat[,2]
order <- 1:nrow(Mat)
# group <- rep(rnorm(1),nrow(Mat))
df <- data.frame(long=long,lat=lat,order=order)
df
}
oz_flatten <- flatten(flatten(oz$geometry))
ozplus <- purrr::map_df(.x=oz_flatten,.f=Mat2Df)
head(ozplus)
ozpluozplus <- oz %>% mutate(
data = geometry %>% purrr::map(.f = function(list) {
inner = list %>% purrr::map(.f = extract)
data.frame(subgroup = 1:length(inner), inner = I(inner))
})
)
test <- oz$geometry[[1]][[1]][[1]]
is.matrix(test)
Mat2Df(test)
test2 <- oz$geometry[[1]]
test2
library(tidyverse)
library(purrr)
library(sf)
ozbig <- read_sf("../Lab2/Data/gadm36_AUS_shp/gadm36_AUS_1.shp")
oz_st <- maptools::thinnedSpatialPoly(as(ozbig, "Spatial"), tolerance = 0.1, minarea = 0.001, topologyPreserve = TRUE)
oz <- st_as_sf(oz_st)
df.oz.purr <- oz$geometry %>%
map_depth(3, data.frame) %>%
purrr::flatten() %>%
purrr::flatten() %>%
bind_rows(.id = "group") %>%
rename("lat" = y, "long" = x)
# df.oz.purr %>%
#   ggplot(aes(x = long, y = lat, group = group)) +
#     geom_polygon()
df.oz.purr
?map_depth
df.oz.purr <- oz$geometry %>%
purrr::map_depth(3, data.frame) %>%
purrr::flatten() %>%
purrr::flatten() %>%
bind_rows(.id = "group") %>%
rename("lat" = y, "long" = x)
?WALK
walk
?walk
install.packages("ourrr")
install.packages("purrr")
install.packages("purrr")
library(purrr)
?map_depth
df.oz.purr <- oz$geometry %>%
purrr::map_depth(3, data.frame) %>%
purrr::flatten() %>%
purrr::flatten() %>%
bind_rows(.id = "group") %>%
rename("lat" = y, "long" = x)
# df.oz.purr %>%
#   ggplot(aes(x = long, y = lat, group = group)) +
#     geom_polygon()
library(tidyverse)
library(purrr)
library(sf)
df.oz.purr <- oz$geometry %>%
purrr::map_depth(3, data.frame) %>%
purrr::flatten() %>%
purrr::flatten() %>%
bind_rows(.id = "group") %>%
rename("lat" = y, "long" = x)
df.oz.purr
head(df.oz.purr)
?bind_rows
test <- oz$geometry[[1]][[1]][[1]]
is.matrix(test)
Mat2Df(test)
Mat2Df <- function(Mat){
long <- Mat[,1]
lat <- Mat[,2]
order <- 1:nrow(Mat)
# group <- rep(rnorm(1),nrow(Mat))
df <- data.frame(long=long,lat=lat,order=order)
df
}
test2 <- oz$geometry[[1]]
Mat2Df(test2)
test2
flatten(test2)
flatten(test2) %>% purrr::map(.f = Mat2Df)
flatten(test2) %>% purrr::map(.f = Mat2Df) -> ck
ck
flatten(ck) %>% bind_rows(.id = "group")
bind_rows(ck)
bind_rows(ck, .id = "group")
wrapper <- function(multpoly){
lst <- flatten(multpoly) %>% purrr::map(.f = Mat2Df) %>%
bind_rows(.id = "group")
}
wrapper(test2)
wrapper <- function(multpoly){
flatten(multpoly) %>% purrr::map(.f = Mat2Df) %>%
bind_rows(.id = "group")
}
wrapper(test2)
ck
wrapper(test2) -> ck
ck
select(ck, -group, everything())
select(ck, -group, -order, everything())
wrapper(oz$geometry)
wrapper(oz$geometry[[1]])
oz %>% purrr::map(.f = wrapper)
?map
oz %>% transmute(new_geo = geometry %>% purrr::map(.f = wrapper))
newck <- oz[1:2] %>% transmute(new_geo = geometry %>% purrr::map(.f = wrapper))
newck
newck <- oz[1:2] %>% transmute(new_geo = geometry %>% purrr::map_df(.f = wrapper))
wrapper(oz$geometry[[1]])
wrapper(oz$geometry[[1]]) -> ck
str(ck)
is.data.frame(ck)
newck <- oz[1:2] %>% transmute(geometry %>% purrr::map_df(.f = wrapper))
newck <- oz[1:2] %>% transmute(geometry %>% purrr::map(.f = wrapper))
newck$geometry
oz[1:2,]
newck <- oz[1:2] %>% transmute(newgeo = geometry %>% purrr::map(.f = wrapper))
newck$newgeo
newck <- oz[1:2] %>% transmute(newgeo = geometry %>% purrr::map(.f = wrapper) %>% nest())
?nest
wrapper(oz$geometry[[1]]) %>% nest()-> ck
ck
usethis::use_testthat()
usethis::use_test("test team 5")
a <- list(1:10, letters)
print(a)
str(a)
usethis::use_test("fun team_5")
?has_extenstion
?has_extension
?see_if
?maptools::thinnedSpatialPoly
ozbig <- sf::read_sf("../Lab2/Data/gadm36_AUS_shp/gadm36_AUS_1.shp")
class(sf::as_Spatial(ozbig))
library(assertthat)
file_good <- "../data/gadm36_AUS_1.shp"
file_bad <- "/data/gadm36_FRA_2.dbf"
# has correct file
expect_that(has_extension(file_good, shp), is_true())
expect_that(has_extension(file_bad, shp), is_false())
# has geometry column
shp_big <- sf::read_sf("../Lab2/Data/gadm36_AUS_shp/gadm36_AUS_1.shp")
shp_thin <- maptools::thinnedSpatialPoly(sf::as(shp_big, "Spatial"),
tolerance = 0.1, minarea = 0.001,
topologyPreserve = TRUE) %>% sf::st_as_sf()
has_extension(file_good, shp)
has_extension(file_good, "shp")
has_extension(file_good, ".shp")
shp_big <- sf::read_sf(file_good)
shp_sp <- maptools::thinnedSpatialPoly(sf::as(shp_big, "Spatial"),
tolerance = 0.1, minarea = 0.001,
topologyPreserve = TRUE)
shp_thin <- sf::st_as_sf(shp_sp)
file.choose()
getwd()
file_good <- "./data/gadm36_AUS_1.shp"
# has geometry column
shp_big <- sf::read_sf(file_good)
ozbig <- sf::read_sf("../Lab2/Data/gadm36_AUS_shp/gadm36_AUS_1.shp")
library(sf)
?roxygen2::import
?usethis::use_package
usethis::use_package("maptools")
library(dplyr)
library(purrr)
library(sf)
ozbig <- sf::read_sf("../Lab2/Data/gadm36_AUS_shp/gadm36_AUS_1.shp")
oz_st <- maptools::thinnedSpatialPoly(sf::as(ozbig, "Spatial"), tolerance = 0.1, minarea = 0.001, topologyPreserve = TRUE)
oz <- st_as_sf(oz_st)
Mat2Df <- function(Mat){
long <- Mat[,1]
lat <- Mat[,2]
order <- 1:nrow(Mat)
# group <- rep(rnorm(1),nrow(Mat))
df <- data.frame(long=long,lat=lat,order=order)
df
}
Mat2Df <- function(Mat){
long <- Mat[,1]
lat <- Mat[,2]
order <- 1:nrow(Mat)
# group <- rep(rnorm(1),nrow(Mat))
df <- data.frame(long=long,lat=lat,order=order)
return(df)
}
oz_flatten <- flatten(flatten(oz$geometry))
ozplus <- purrr::map_df(.x=oz_flatten,.f=Mat2Df)
oz <- st_as_sf(oz_st)
oz_st <- maptools::thinnedSpatialPoly(as(ozbig, "Spatial"), tolerance = 0.1, minarea = 0.001, topologyPreserve = TRUE)
oz <- st_as_sf(oz_st)
oz_flatten <- flatten(flatten(oz$geometry))
oz_flatten
ozplus <- purrr::map_df(.x=oz_flatten,.f=Mat2Df)
ozplus
test <- oz$geometry[[1]][[1]][[1]]
is.matrix(test)
Mat2Df(test)
hm <- Mat2Df(test)
length(hm)
length(hm$order)
has_attr(hm, long)
has_attr(hm, "long")
has_name(hm, "log")
has_name(hm, "long")
newgeo <- function(multpoly){
lst <- flatten(multpoly) %>% purrr::map(.f = Mat2Df) %>%
bind_rows(.id = "group")
newdf <- lst %>% select(-group, -order, everything())
}
newck <- oz[1:2] %>% transmute(n_geometry = geometry %>% purrr::map(.f = newgeo) %>% nest())
library(purrr)
newck <- oz[1:2] %>% transmute(n_geometry = geometry %>% purrr::map(.f = newgeo) %>% nest())
library(tidyverse)
?nest
library(gapminder)
countryList <- gapminder %>% mutate(year = year-1950) %>%
nest(-country, -continent)
countryList
gapminder
countryList <- gapminder %>% mutate(year = year-1950)
countryList
oz[1:2]
oz[1:2,]
is.list(oz$geometry)
newck <- oz[1:2,] %>% transmute(n_geometry = geometry %>% purrr::map(.f = newgeo))
newck
newgeo <- function(multpoly){
lst <- flatten(multpoly) %>% purrr::map(.f = Mat2Df) %>%
bind_rows(.id = "group")
newdf <- lst %>% select(-group, -order, everything())
}
test2 <- oz$geometry[[1]]
newgeo(test2)
newgeo <- function(multpoly){
lst <- flatten(multpoly) %>% purrr::map(.f = Mat2Df) %>%
bind_rows(.id = "group")
newdf <- lst %>% select(-group, -order, everything())
return(newdf)
}
newgeo(test2)
is.data.frame(newgeo(test2))
newck <- oz[1:2,] %>% transmute(n_geometry = geometry %>% purrr::map(.f = newgeo))
newck
newck <- oz[1:2,] %>% transmute(n_geometry = geometry %>% purrr::map(.f = newgeo)) %>%
nest(-everything())
newck
names(oz)
head(oz)
newck <- oz[1:2,] %>% transmute(n_geometry = geometry %>% purrr::map(.f = newgeo)) %>%
nest(-NAME_1)
newck <- oz[1:2,] %>% transmute(n_geometry = geometry %>% purrr::map(.f = newgeo)) %>%
nest(-"NAME_1")
is.data.frame(oz)
select(oz, 1:4)
select(as.data.frame(oz), 1:4)
newck <- oz[1:2,] %>% transmute(n_geometry = geometry %>% purrr::map(.f = newgeo)) %>%
nest(-1:4)
newgeo(test2)
test2
test2[1]
test2[[1]
]
newgeo(test2) -> t2_output
t2_output$group[1]
t2_output$group[6]
is.numeric(t2_output$group[6])
sub_list <- test2[[1]]
sub_len <- length(sub_list)
sub_len
sub_list <- test2[[1]]
sub_len <- length(sub_list)
sub_list
test2[[1]]
test2[[1]][[1]]
sub_list <- test2[[1]][[1]]
sub_len <- length(sub_list)
sub_len
sub_list
sub_list$y
sub_list[1,]
sub_list[,1]
dim(sub_list)
sub_len <- length(sub_list[,1])
sub_len
5
t2_output$group[1+sub_len]
t2_output$group[sub_len]
names(t2_output)
str(names(t2_output))
